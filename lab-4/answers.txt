/******************************************************************************
** Lab 4: Path finder
******************************************************************************/

Group members:

Max Yoorkevich
Andy Alavinasab
Sebastian Sela

/******************************************************************************
** 1. List the number of loop iterations, minimal cost, and a shortest path
**    (i.e. a path having minimal cost) for each of the following invocations.
******************************************************************************/

> java RunPathFinder ucs AdjacencyGraph graphs/AdjacencyGraph/citygraph-SE.txt Lund Kiruna

loop iterations: [5427]
minimal cost:    [1826]
shortest path:   [31]

> java RunPathFinder ucs NPuzzle 3 /HFG/BED/C_A/ /ABC/DEF/GH_/

loop iterations: [483540]
minimal cost:    [31]
shortest path:   [31]

> java RunPathFinder astar NPuzzle 3 /HFG/BED/C_A/ /ABC/DEF/GH_/

loop iterations: [35123]
minimal cost:    [31]

> java RunPathFinder ucs NPuzzle 3 /HGF/BED/C_A/ /ABC/DEF/GH_/

loop iterations: [483841]
minimal cost:    [No path found]
shortest path:   [No path found]

> java RunPathFinder ucs GridGraph graphs/GridGraph/AR0011SR.map 23:161 130:211

loop iterations: [159327]
minimal cost:    [366,4]
shortest path:   [308]

> java RunPathFinder astar GridGraph graphs/GridGraph/AR0011SR.map 23:161 130:211

loop iterations: [105915]
minimal cost:    [402,47]

> java RunPathFinder ucs WordLadder graphs/WordLadder/swedish-saldo.txt syster broder

loop iterations: [71182]
minimal cost:    [11]
shortest path:   [11]

> java RunPathFinder astar WordLadder graphs/WordLadder/swedish-saldo.txt syster broder

loop iterations: [11365]
minimal cost:    [11]

/******************************************************************************
** 2. For each of the three classes GridGraph, WordLadder, and NPuzzle,
**    what is the approximate improvement factor in the number
**    of loop iterations by running A* instead of UCS?
**    Try a number of different examples per class.
******************************************************************************/

GridGraph:  [~1,5]

WordLadder: [~6]

NPuzzle:    [~13]

/******************************************************************************
** 3. For which of the three classes GridGraph, WordLadder, and NPuzzle,
**    did the heuristic guessCost have the most impact?
**    What do you think is the reason for this?
******************************************************************************/

NPuzzle

As an Npuzzle has at most 4 paths to check for every move it gets exponentially bigger the more
loop iterations it has to go through. This makes an estimate very efficient.

//Also because we didn't make it.

/******************************************************************************
** 4. What are the main differences between your implementations
**    of searchAstar and searchUCS?
******************************************************************************/

SearchUCS finds all paths and chooses the one with the least cost, while searchAstar
estimates the cost to the end through the current node, which reduces overall loop iterations

/******************************************************************************
** 5. What's the asymptotic average-case complexity of WordLadder.outgoingEdges
**    in the alphabet size K and the length N of the given word?
**    Justify briefly.
******************************************************************************/

KN^2

/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

We did this assignment together, and it took us about 6 hours

/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

N ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢿⣿⠛⠃⠄⠄⠈⠉⠛⢿⣿⣿⣿
  ⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⣯⠭⠤⠬⣉⣉⣛⣿⣿⣿⣶⣤⣀⠄⠈⠿⢿⣿
  ⣿⣿⣿⣿⣿⠿⠙⢈⡩⠤⠶⠶⠶⠦⠤⠤⣉⡉⠛⢯⡙⠻⣿⣷⣆⠄⠄⢹
  ⣿⣿⣿⠛⠁⠄⠊⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠒⢄⡈⢢⣈⠻⣿⡆⠄⢠
  ⣿⡿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⢄⠻⣦⣘⣷⠄⢸
  ⣿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠱⡈⢿⣿⠄⠘
  ⡇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢁⠸⡟⠄⢠
  ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠇⠄⣸
  ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣿
  ⡇⣿⡄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠼⠄⣿⣿
  ⡇⣿⣿⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⡠⠂⠄⣼⣿⣿
  ⣿⡙⢿⣿⣷⣄⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⣤⠞⠁⢀⣼⣿⣿⣿
  ⣿⣷⣤⣙⣿⣿⣿⣶⣤⣄⣀⣀⣀⣀⣀⣀⣤⣴⠾⠛⠁⢀⣠⣾⣿⣿⣿⣿
  ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠋⢉⣁⣤⣴⣾⣿⣿⣿⣿⣿⣿

/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

Yes, we copy + pasted our entire code

/******************************************************************************
** D. Describe any serious problems you encountered.
******************************************************************************/


/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned
**    from doing the assignment, and whether you enjoyed it.
******************************************************************************/

